{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Projet de Test d'Automatisation Heyteam - QA engineer Ce projet a pour but la r\u00e9alisation du test technique Heyteam pour le poste de QA engineer. Le code est organis\u00e9 de mani\u00e8re claire et modulaire pour faciliter la maintenance et la lisibilit\u00e9. Bienvenue dans le Guide de Test d'Automatisation Ce guide fournit un ensemble de directives pour la mise en \u0153uvre des tests d'automatisation du processus de connexion pour l'application open classroom. Le code pr\u00e9sent\u00e9 ici suit l'architecture Page Object, une approche largement reconnue pour d\u00e9velopper des tests d'automatisation maintenables et \u00e9volutifs. Les fonctionnalit\u00e9s et les \u00e9l\u00e9ments du DOM sp\u00e9cifiques \u00e0 chaque page sont encapsul\u00e9s dans des classes d\u00e9di\u00e9es, \u00e0 savoir LoginPage . Structure de donn\u00e9es pour les tests Pour couvrir une vari\u00e9t\u00e9 de sc\u00e9narios de test, nous utilisons des donn\u00e9es de test stock\u00e9es dans un fichier JSON ( testData.json ). Cela offre une flexibilit\u00e9 pour tester diff\u00e9rentes combinaisons d'entr\u00e9es utilisateur et sc\u00e9narios. Configuration et Gestion des D\u00e9pendances Notre fichier config.mjs contient la configuration de base requise pour nos tests, y compris l'URL de base du site \u00e0 tester. Les d\u00e9pendances de ce projet sont g\u00e9r\u00e9es \u00e0 l'aide de gestionnaires de paquets couramment utilis\u00e9s tels que npm ou yarn. V\u00e9rification, D\u00e9pannage et audit V\u00e9rification des d\u00e9pendances checkDependencies.mjs Le script de v\u00e9rification des d\u00e9pendances permet d'assurer que tous les navigateurs n\u00e9cessaires sont correctement install\u00e9s et accessibles avant l'ex\u00e9cution des tests. Le script utilise les modules Chromium, Firefox et Webkit de Playwright pour obtenir les chemins d'ex\u00e9cution de chaque navigateur. S'il y a un probl\u00e8me avec l'installation de l'un des navigateurs, le script l\u00e8vera une exception que nous interceptons et g\u00e9rons en affichant un message d'erreur \u00e0 l'utilisateur. Si aucune exception n'est lev\u00e9e, cela signifie que toutes les d\u00e9pendances sont correctement install\u00e9es et nous pouvons continuer \u00e0 ex\u00e9cuter nos tests. Affichage des informations du projet project-info.mjs Le second script fournit des informations pr\u00e9cieuses sur l'environnement du projet et peut \u00eatre utilis\u00e9 pour le d\u00e9pannage ou l'audit. Il r\u00e9cup\u00e8re et affiche des informations sur le syst\u00e8me d'exploitation, la version de Node.js et les versions des navigateurs utilis\u00e9s par Playwright. Le script fait ensuite une lecture synchrone du syst\u00e8me de fichiers pour afficher la structure du projet, excluant certains dossiers non pertinents comme node_modules, .git, etc. Cela donne une vue globale de la structure du projet, utile pour comprendre l'organisation des fichiers et des dossiers dans le projet. Le script utilise \u00e9galement les fonctionnalit\u00e9s de gestion des chemins et du syst\u00e8me de fichiers de Node.js pour r\u00e9soudre les chemins de fichiers et lire le contenu des dossiers. G\u00e9n\u00e9ration de Rapports Pour am\u00e9liorer la visibilit\u00e9 des r\u00e9sultats des tests, nous utilisons allure , un g\u00e9n\u00e9rateur de rapports largement reconnu dans l'industrie pour sa clart\u00e9 et son efficacit\u00e9. Allure offre des rapports illustratifs et d\u00e9taill\u00e9s, ce qui rend les r\u00e9sultats des tests facilement compr\u00e9hensibles m\u00eame pour les non-techniciens. Les rapports g\u00e9n\u00e9r\u00e9s par Allure incluent une vue d'ensemble de l'ex\u00e9cution du test, permettant aux parties prenantes de comprendre rapidement le niveau de qualit\u00e9 du code. De plus, Allure offre la possibilit\u00e9 de voir des d\u00e9tails sp\u00e9cifiques pour chaque cas de test, incluant des captures d'\u00e9cran, des messages de log, des enregistrements vid\u00e9o et d'autres artefacts qui peuvent \u00eatre utiles pour le d\u00e9bogage. Par cons\u00e9quent, l'utilisation d'Allure am\u00e9liore grandement la visibilit\u00e9 des r\u00e9sultats des tests, aide \u00e0 identifier les probl\u00e8mes et acc\u00e9l\u00e8re le processus de prise de d\u00e9cision bas\u00e9e sur les r\u00e9sultats des tests. Test management Ce projet utilise une pile de tests modernes avec Playwright, Test Runner et Allure Reporter. Nous avons mis en place une m\u00e9thodologie de gestion de nos tests pour assurer une organisation claire et une tra\u00e7abilit\u00e9 pr\u00e9cise des tests. Pour plus d'informations sur notre approche de gestion des tests, veuillez consulter notre guide : Gestion des tests . \u00c0 Noter Bien que ces travaux fournissent un mod\u00e8le semblant complet pour la mise en place des tests d'automatisation, il peut toujours \u00eatre optimis\u00e9 et n\u00e9cessiter des ajustements en fonction des attentes sp\u00e9cifiques. Avant d'ex\u00e9cuter les tests, veillez \u00e0 installer toutes les d\u00e9pendances n\u00e9cessaires. J'esp\u00e8re que ce guide vous aidera \u00e0 appr\u00e9cier la d\u00e9marche quant \u00e0 une approche diff\u00e9rente du test de la mise en place de tests d'automatisation efficaces. Bonne codification !","title":"Accueil"},{"location":"#projet-de-test-dautomatisation-heyteam-qa-engineer","text":"Ce projet a pour but la r\u00e9alisation du test technique Heyteam pour le poste de QA engineer. Le code est organis\u00e9 de mani\u00e8re claire et modulaire pour faciliter la maintenance et la lisibilit\u00e9.","title":"Projet de Test d'Automatisation Heyteam - QA engineer"},{"location":"#bienvenue-dans-le-guide-de-test-dautomatisation","text":"Ce guide fournit un ensemble de directives pour la mise en \u0153uvre des tests d'automatisation du processus de connexion pour l'application open classroom. Le code pr\u00e9sent\u00e9 ici suit l'architecture Page Object, une approche largement reconnue pour d\u00e9velopper des tests d'automatisation maintenables et \u00e9volutifs. Les fonctionnalit\u00e9s et les \u00e9l\u00e9ments du DOM sp\u00e9cifiques \u00e0 chaque page sont encapsul\u00e9s dans des classes d\u00e9di\u00e9es, \u00e0 savoir LoginPage .","title":"Bienvenue dans le Guide de Test d'Automatisation"},{"location":"#structure-de-donnees-pour-les-tests","text":"Pour couvrir une vari\u00e9t\u00e9 de sc\u00e9narios de test, nous utilisons des donn\u00e9es de test stock\u00e9es dans un fichier JSON ( testData.json ). Cela offre une flexibilit\u00e9 pour tester diff\u00e9rentes combinaisons d'entr\u00e9es utilisateur et sc\u00e9narios.","title":"Structure de donn\u00e9es pour les tests"},{"location":"#configuration-et-gestion-des-dependances","text":"Notre fichier config.mjs contient la configuration de base requise pour nos tests, y compris l'URL de base du site \u00e0 tester. Les d\u00e9pendances de ce projet sont g\u00e9r\u00e9es \u00e0 l'aide de gestionnaires de paquets couramment utilis\u00e9s tels que npm ou yarn.","title":"Configuration et Gestion des D\u00e9pendances"},{"location":"#verification-depannage-et-audit","text":"","title":"V\u00e9rification, D\u00e9pannage et audit"},{"location":"#verification-des-dependances-checkdependenciesmjs","text":"Le script de v\u00e9rification des d\u00e9pendances permet d'assurer que tous les navigateurs n\u00e9cessaires sont correctement install\u00e9s et accessibles avant l'ex\u00e9cution des tests. Le script utilise les modules Chromium, Firefox et Webkit de Playwright pour obtenir les chemins d'ex\u00e9cution de chaque navigateur. S'il y a un probl\u00e8me avec l'installation de l'un des navigateurs, le script l\u00e8vera une exception que nous interceptons et g\u00e9rons en affichant un message d'erreur \u00e0 l'utilisateur. Si aucune exception n'est lev\u00e9e, cela signifie que toutes les d\u00e9pendances sont correctement install\u00e9es et nous pouvons continuer \u00e0 ex\u00e9cuter nos tests.","title":"V\u00e9rification des d\u00e9pendances checkDependencies.mjs"},{"location":"#affichage-des-informations-du-projet-project-infomjs","text":"Le second script fournit des informations pr\u00e9cieuses sur l'environnement du projet et peut \u00eatre utilis\u00e9 pour le d\u00e9pannage ou l'audit. Il r\u00e9cup\u00e8re et affiche des informations sur le syst\u00e8me d'exploitation, la version de Node.js et les versions des navigateurs utilis\u00e9s par Playwright. Le script fait ensuite une lecture synchrone du syst\u00e8me de fichiers pour afficher la structure du projet, excluant certains dossiers non pertinents comme node_modules, .git, etc. Cela donne une vue globale de la structure du projet, utile pour comprendre l'organisation des fichiers et des dossiers dans le projet. Le script utilise \u00e9galement les fonctionnalit\u00e9s de gestion des chemins et du syst\u00e8me de fichiers de Node.js pour r\u00e9soudre les chemins de fichiers et lire le contenu des dossiers.","title":"Affichage des informations du projet project-info.mjs"},{"location":"#generation-de-rapports","text":"Pour am\u00e9liorer la visibilit\u00e9 des r\u00e9sultats des tests, nous utilisons allure , un g\u00e9n\u00e9rateur de rapports largement reconnu dans l'industrie pour sa clart\u00e9 et son efficacit\u00e9. Allure offre des rapports illustratifs et d\u00e9taill\u00e9s, ce qui rend les r\u00e9sultats des tests facilement compr\u00e9hensibles m\u00eame pour les non-techniciens. Les rapports g\u00e9n\u00e9r\u00e9s par Allure incluent une vue d'ensemble de l'ex\u00e9cution du test, permettant aux parties prenantes de comprendre rapidement le niveau de qualit\u00e9 du code. De plus, Allure offre la possibilit\u00e9 de voir des d\u00e9tails sp\u00e9cifiques pour chaque cas de test, incluant des captures d'\u00e9cran, des messages de log, des enregistrements vid\u00e9o et d'autres artefacts qui peuvent \u00eatre utiles pour le d\u00e9bogage. Par cons\u00e9quent, l'utilisation d'Allure am\u00e9liore grandement la visibilit\u00e9 des r\u00e9sultats des tests, aide \u00e0 identifier les probl\u00e8mes et acc\u00e9l\u00e8re le processus de prise de d\u00e9cision bas\u00e9e sur les r\u00e9sultats des tests.","title":"G\u00e9n\u00e9ration de Rapports"},{"location":"#test-management","text":"Ce projet utilise une pile de tests modernes avec Playwright, Test Runner et Allure Reporter. Nous avons mis en place une m\u00e9thodologie de gestion de nos tests pour assurer une organisation claire et une tra\u00e7abilit\u00e9 pr\u00e9cise des tests. Pour plus d'informations sur notre approche de gestion des tests, veuillez consulter notre guide : Gestion des tests .","title":"Test management"},{"location":"#a-noter","text":"Bien que ces travaux fournissent un mod\u00e8le semblant complet pour la mise en place des tests d'automatisation, il peut toujours \u00eatre optimis\u00e9 et n\u00e9cessiter des ajustements en fonction des attentes sp\u00e9cifiques. Avant d'ex\u00e9cuter les tests, veillez \u00e0 installer toutes les d\u00e9pendances n\u00e9cessaires. J'esp\u00e8re que ce guide vous aidera \u00e0 appr\u00e9cier la d\u00e9marche quant \u00e0 une approche diff\u00e9rente du test de la mise en place de tests d'automatisation efficaces. Bonne codification !","title":"\u00c0 Noter"},{"location":"AssertionsUsage/","text":"Utilisation des assertions Les assertions sont utilis\u00e9es pour v\u00e9rifier que les r\u00e9sultats des tests correspondent aux r\u00e9sultats attendus. En cas d'\u00e9chec d'une assertion, une erreur est g\u00e9n\u00e9r\u00e9e et le test est marqu\u00e9 comme \u00e9chou\u00e9.","title":"Utilisation des assertions"},{"location":"AssertionsUsage/#utilisation-des-assertions","text":"Les assertions sont utilis\u00e9es pour v\u00e9rifier que les r\u00e9sultats des tests correspondent aux r\u00e9sultats attendus. En cas d'\u00e9chec d'une assertion, une erreur est g\u00e9n\u00e9r\u00e9e et le test est marqu\u00e9 comme \u00e9chou\u00e9.","title":"Utilisation des assertions"},{"location":"CodeOrganization/","text":"Organisation du code Le code de notre projet est organis\u00e9 de mani\u00e8re \u00e0 faciliter la maintenance, la lisibilit\u00e9, et pour assurer une structure claire. Cette documentation vous aidera \u00e0 comprendre l'organisation du code et \u00e0 naviguer plus facilement dans le projet. Voici la structure du r\u00e9pertoire : --- Project Structure --- /Heyteam \u2514\u2500\u2500 combined.log \u2514\u2500\u2500 docs \u2514\u2500\u2500 error.log \u2514\u2500\u2500 jsdoc.json \u2514\u2500\u2500 package.json \u2514\u2500\u2500 playwright.config.mjs \u251c\u2500\u2500 projectDocs/ \u2502 \u2514\u2500\u2500 docs \u2502 \u2514\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 scripts/ \u2502 \u2514\u2500\u2500 checkDependencies.mjs \u2502 \u2514\u2500\u2500 project-info.mjs \u251c\u2500\u2500 src/ \u2502 \u2514\u2500\u2500 config.mjs \u2502 \u251c\u2500\u2500 data/ \u2502 \u2502 \u2514\u2500\u2500 testData.json \u2502 \u2514\u2500\u2500 mock-server.js \u2502 \u251c\u2500\u2500 pages/ \u2502 \u2502 \u2514\u2500\u2500 LoginPage.mjs \u2502 \u251c\u2500\u2500 services/ \u2502 \u2502 \u2514\u2500\u2500 logger.mjs \u2502 \u251c\u2500\u2500 test-plans/ \u2502 \u2502 \u2514\u2500\u2500 login-plan.md \u2502 \u2502 \u2514\u2500\u2500 password-recovery-plan.md \u2502 \u2502 \u2514\u2500\u2500 registration-plan.md \u2502 \u251c\u2500\u2500 tests/ \u2502 \u251c\u2500\u2500 login/ \u2502 \u2502 \u2514\u2500\u2500 error-handling.spec.mjs \u2502 \u2502 \u2514\u2500\u2500 invalid-login.spec.mjs \u2502 \u2502 \u2514\u2500\u2500 successful-login.spec.mjs \u2502 \u251c\u2500\u2500 old_tests/ \u2502 \u2502 \u2514\u2500\u2500 error-handling.spec.mjs \u2502 \u2502 \u2514\u2500\u2500 login-tests-mock.spec.mjs \u2502 \u2502 \u2514\u2500\u2500 login-tests.spec.mjs \u2502 \u251c\u2500\u2500 password-recovery/ \u2502 \u2502 \u2514\u2500\u2500 password-recovery.spec.mjs \u2502 \u251c\u2500\u2500 registration/ \u2502 \u2502 \u2514\u2500\u2500 error-handling.spec.mjs \u2502 \u2502 \u2514\u2500\u2500 registration-process.spec.mjs \u2502 \u2514\u2500\u2500 testHelpers.mjs \u2514\u2500\u2500 test-results Description des Fichiers et Dossiers combined.log : Ce fichier contient des logs combin\u00e9s provenant de diff\u00e9rentes parties de l'application. docs : Ce dossier contient la documentation relative \u00e0 l'ensemble du projet. error.log : Ce fichier contient les logs d'erreurs de l'application. jsdoc.json : Ce fichier est le fichier de configuration pour JSDoc qui est utilis\u00e9 pour g\u00e9n\u00e9rer la documentation du code. package.json : Ce fichier contient la liste des paquets npm n\u00e9cessaires pour le projet. playwright.config.mjs : Ce fichier contient la configuration de Playwright pour ex\u00e9cuter les tests. projectDocs : Ce dossier contient la documentation de MkDocs pour le projet. scripts : Ce dossier contient des scripts utilitaires pour le projet. src : Ce dossier contient le code source du projet. test-results : Ce dossier contient les r\u00e9sultats des tests ex\u00e9cut\u00e9s. config.mjs : Ce fichier contient les configurations de base n\u00e9cessaires pour l'ex\u00e9cution des tests. Il inclut l'URL de base du site \u00e0 tester, ainsi que d'autres param\u00e8tres de configuration sp\u00e9cifiques aux tests. services : Ce dossier contient les fichiers de service utilis\u00e9s dans l'application. Par exemple, le fichier logger.mjs dans ce dossier est utilis\u00e9 pour g\u00e9rer les logs de l'application. test-plans : Ce dossier contient les plans de test pour les diff\u00e9rentes fonctionnalit\u00e9s de l'application. Chaque fichier markdown repr\u00e9sente un plan de test distinct. Par exemple, le fichier login-plan.md contient le plan de test pour le processus de connexion.","title":"Organisation du code"},{"location":"CodeOrganization/#organisation-du-code","text":"Le code de notre projet est organis\u00e9 de mani\u00e8re \u00e0 faciliter la maintenance, la lisibilit\u00e9, et pour assurer une structure claire. Cette documentation vous aidera \u00e0 comprendre l'organisation du code et \u00e0 naviguer plus facilement dans le projet. Voici la structure du r\u00e9pertoire : --- Project Structure --- /Heyteam \u2514\u2500\u2500 combined.log \u2514\u2500\u2500 docs \u2514\u2500\u2500 error.log \u2514\u2500\u2500 jsdoc.json \u2514\u2500\u2500 package.json \u2514\u2500\u2500 playwright.config.mjs \u251c\u2500\u2500 projectDocs/ \u2502 \u2514\u2500\u2500 docs \u2502 \u2514\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 scripts/ \u2502 \u2514\u2500\u2500 checkDependencies.mjs \u2502 \u2514\u2500\u2500 project-info.mjs \u251c\u2500\u2500 src/ \u2502 \u2514\u2500\u2500 config.mjs \u2502 \u251c\u2500\u2500 data/ \u2502 \u2502 \u2514\u2500\u2500 testData.json \u2502 \u2514\u2500\u2500 mock-server.js \u2502 \u251c\u2500\u2500 pages/ \u2502 \u2502 \u2514\u2500\u2500 LoginPage.mjs \u2502 \u251c\u2500\u2500 services/ \u2502 \u2502 \u2514\u2500\u2500 logger.mjs \u2502 \u251c\u2500\u2500 test-plans/ \u2502 \u2502 \u2514\u2500\u2500 login-plan.md \u2502 \u2502 \u2514\u2500\u2500 password-recovery-plan.md \u2502 \u2502 \u2514\u2500\u2500 registration-plan.md \u2502 \u251c\u2500\u2500 tests/ \u2502 \u251c\u2500\u2500 login/ \u2502 \u2502 \u2514\u2500\u2500 error-handling.spec.mjs \u2502 \u2502 \u2514\u2500\u2500 invalid-login.spec.mjs \u2502 \u2502 \u2514\u2500\u2500 successful-login.spec.mjs \u2502 \u251c\u2500\u2500 old_tests/ \u2502 \u2502 \u2514\u2500\u2500 error-handling.spec.mjs \u2502 \u2502 \u2514\u2500\u2500 login-tests-mock.spec.mjs \u2502 \u2502 \u2514\u2500\u2500 login-tests.spec.mjs \u2502 \u251c\u2500\u2500 password-recovery/ \u2502 \u2502 \u2514\u2500\u2500 password-recovery.spec.mjs \u2502 \u251c\u2500\u2500 registration/ \u2502 \u2502 \u2514\u2500\u2500 error-handling.spec.mjs \u2502 \u2502 \u2514\u2500\u2500 registration-process.spec.mjs \u2502 \u2514\u2500\u2500 testHelpers.mjs \u2514\u2500\u2500 test-results","title":"Organisation du code"},{"location":"CodeOrganization/#description-des-fichiers-et-dossiers","text":"combined.log : Ce fichier contient des logs combin\u00e9s provenant de diff\u00e9rentes parties de l'application. docs : Ce dossier contient la documentation relative \u00e0 l'ensemble du projet. error.log : Ce fichier contient les logs d'erreurs de l'application. jsdoc.json : Ce fichier est le fichier de configuration pour JSDoc qui est utilis\u00e9 pour g\u00e9n\u00e9rer la documentation du code. package.json : Ce fichier contient la liste des paquets npm n\u00e9cessaires pour le projet. playwright.config.mjs : Ce fichier contient la configuration de Playwright pour ex\u00e9cuter les tests. projectDocs : Ce dossier contient la documentation de MkDocs pour le projet. scripts : Ce dossier contient des scripts utilitaires pour le projet. src : Ce dossier contient le code source du projet. test-results : Ce dossier contient les r\u00e9sultats des tests ex\u00e9cut\u00e9s. config.mjs : Ce fichier contient les configurations de base n\u00e9cessaires pour l'ex\u00e9cution des tests. Il inclut l'URL de base du site \u00e0 tester, ainsi que d'autres param\u00e8tres de configuration sp\u00e9cifiques aux tests. services : Ce dossier contient les fichiers de service utilis\u00e9s dans l'application. Par exemple, le fichier logger.mjs dans ce dossier est utilis\u00e9 pour g\u00e9rer les logs de l'application. test-plans : Ce dossier contient les plans de test pour les diff\u00e9rentes fonctionnalit\u00e9s de l'application. Chaque fichier markdown repr\u00e9sente un plan de test distinct. Par exemple, le fichier login-plan.md contient le plan de test pour le processus de connexion.","title":"Description des Fichiers et Dossiers"},{"location":"DebugPlaywright/","text":"Configuration du d\u00e9bogage Playwright dans IntelliJ IDEA Ces instructions vous guideront \u00e0 travers le processus de configuration du d\u00e9bogage pour les tests Playwright dans IntelliJ IDEA. Pr\u00e9requis Avoir un projet Node.js avec Playwright install\u00e9 Avoir IntelliJ IDEA \u00c9tapes Ouvrez votre package.json et ajoutez le script de d\u00e9bogage suivant dans la section scripts : \"scripts\": { \"debug\": \"node --inspect-brk node_modules/.bin/playwright test\" } Votre package.json devrait ressembler \u00e0 quelque chose comme ceci: { \"name\": \"my-project\", \"version\": \"1.0.0\", \"description\": \"My Project Description\", \"main\": \"index.js\", \"scripts\": { \"test\": \"playwright test\", \"debug\": \"node --inspect-brk node_modules/.bin/playwright test\" }, \"keywords\": [], \"author\": \"\", \"license\": \"ISC\", \"dependencies\": { ... }, \"devDependencies\": { \"@playwright/test\": \"^1.14.1\", ... } } Dans IntelliJ IDEA, allez dans le menu et s\u00e9lectionnez Run > Edit Configurations... . Cliquez sur le bouton + pour ajouter une nouvelle configuration et s\u00e9lectionnez Node.js . Remplissez les champs de la mani\u00e8re suivante : Name : Mettez un nom pour votre configuration, par exemple Debug Playwright . Node parameters : Entrez --inspect-brk . Working directory : S\u00e9lectionnez le r\u00e9pertoire de votre projet. JavaScript file : Mettez le chemin vers le fichier d'entr\u00e9e de Playwright, qui est g\u00e9n\u00e9ralement node_modules/.bin/playwright . Application parameters : Mettez test . Env : Ajoutez les variables d'environnement n\u00e9cessaires pour vos tests, le cas \u00e9ch\u00e9ant. Cliquez sur OK pour enregistrer la configuration. D\u00e9bogage de vos tests Maintenant que la configuration du d\u00e9bogueur est termin\u00e9e, vous pouvez lancer le d\u00e9bogage de vos tests Playwright. Pour ce faire, s\u00e9lectionnez la configuration Debug Playwright (ou le nom que vous avez choisi) dans le menu d\u00e9roulant de d\u00e9bogage en haut \u00e0 droite de l'IDE, puis cliquez sur le bouton de d\u00e9bogage (le bouton avec le bug). IntelliJ IDEA lancera les tests Playwright en mode de d\u00e9bogage et ouvrira l'outil de d\u00e9bogage. Vous pouvez maintenant utiliser les outils de d\u00e9bogage pour inspecter les variables, ex\u00e9cuter du code pas \u00e0 pas, ajouter des points d'arr\u00eat, etc. Bien s\u00fbr, voici comment vous pouvez int\u00e9grer l'option de d\u00e9bogage PWDEBUG \u00e0 votre configuration : Ajout de l'option PWDEBUG pour le d\u00e9bogage de Playwright L'option PWDEBUG est une variable d'environnement qui peut \u00eatre utilis\u00e9e pour activer le mode de d\u00e9bogage de Playwright. Cette variable d'environnement active des fonctionnalit\u00e9s suppl\u00e9mentaires utiles lors du d\u00e9bogage de vos tests, comme l'arr\u00eat automatique avant chaque action Playwright, ce qui permet d'inspecter l'\u00e9tat du navigateur avant que l'action ne soit ex\u00e9cut\u00e9e. Voici comment vous pouvez l'ajouter \u00e0 votre configuration : Ouvrez votre package.json et ajoutez le script de d\u00e9bogage suivant dans la section scripts : \"scripts\": { \"test:debug\": \"PWDEBUG=1 playwright test\" } Votre package.json devrait ressembler \u00e0 quelque chose comme ceci: { \"name\": \"my-project\", \"version\": \"1.0.0\", \"description\": \"My Project Description\", \"main\": \"index.js\", \"scripts\": { \"test\": \"playwright test\", \"debug\": \"node --inspect-brk node_modules/.bin/playwright test\", \"test:debug\": \"PWDEBUG=1 playwright test\" }, \"keywords\": [], \"author\": \"\", \"license\": \"ISC\", \"dependencies\": { ... }, \"devDependencies\": { \"@playwright/test\": \"^1.14.1\", ... } } Pour ex\u00e9cuter vos tests en mode de d\u00e9bogage avec PWDEBUG , utilisez simplement la commande npm run test:debug dans votre terminal. Cela lancera les tests Playwright avec l'option PWDEBUG activ\u00e9e. Veuillez noter que lorsqu'il est utilis\u00e9 avec PWDEBUG=1 , Playwright s'arr\u00eate automatiquement avant chaque action et apr\u00e8s chaque navigation, ce qui vous permet d'inspecter l'\u00e9tat du navigateur. C'est extr\u00eamement utile lorsque vous essayez de comprendre pourquoi un test particulier \u00e9choue.","title":"Configuration du d\u00e9bogage Playwright"},{"location":"DebugPlaywright/#configuration-du-debogage-playwright-dans-intellij-idea","text":"Ces instructions vous guideront \u00e0 travers le processus de configuration du d\u00e9bogage pour les tests Playwright dans IntelliJ IDEA.","title":"Configuration du d\u00e9bogage Playwright dans IntelliJ IDEA"},{"location":"DebugPlaywright/#prerequis","text":"Avoir un projet Node.js avec Playwright install\u00e9 Avoir IntelliJ IDEA","title":"Pr\u00e9requis"},{"location":"DebugPlaywright/#etapes","text":"Ouvrez votre package.json et ajoutez le script de d\u00e9bogage suivant dans la section scripts : \"scripts\": { \"debug\": \"node --inspect-brk node_modules/.bin/playwright test\" } Votre package.json devrait ressembler \u00e0 quelque chose comme ceci: { \"name\": \"my-project\", \"version\": \"1.0.0\", \"description\": \"My Project Description\", \"main\": \"index.js\", \"scripts\": { \"test\": \"playwright test\", \"debug\": \"node --inspect-brk node_modules/.bin/playwright test\" }, \"keywords\": [], \"author\": \"\", \"license\": \"ISC\", \"dependencies\": { ... }, \"devDependencies\": { \"@playwright/test\": \"^1.14.1\", ... } } Dans IntelliJ IDEA, allez dans le menu et s\u00e9lectionnez Run > Edit Configurations... . Cliquez sur le bouton + pour ajouter une nouvelle configuration et s\u00e9lectionnez Node.js . Remplissez les champs de la mani\u00e8re suivante : Name : Mettez un nom pour votre configuration, par exemple Debug Playwright . Node parameters : Entrez --inspect-brk . Working directory : S\u00e9lectionnez le r\u00e9pertoire de votre projet. JavaScript file : Mettez le chemin vers le fichier d'entr\u00e9e de Playwright, qui est g\u00e9n\u00e9ralement node_modules/.bin/playwright . Application parameters : Mettez test . Env : Ajoutez les variables d'environnement n\u00e9cessaires pour vos tests, le cas \u00e9ch\u00e9ant. Cliquez sur OK pour enregistrer la configuration.","title":"\u00c9tapes"},{"location":"DebugPlaywright/#debogage-de-vos-tests","text":"Maintenant que la configuration du d\u00e9bogueur est termin\u00e9e, vous pouvez lancer le d\u00e9bogage de vos tests Playwright. Pour ce faire, s\u00e9lectionnez la configuration Debug Playwright (ou le nom que vous avez choisi) dans le menu d\u00e9roulant de d\u00e9bogage en haut \u00e0 droite de l'IDE, puis cliquez sur le bouton de d\u00e9bogage (le bouton avec le bug). IntelliJ IDEA lancera les tests Playwright en mode de d\u00e9bogage et ouvrira l'outil de d\u00e9bogage. Vous pouvez maintenant utiliser les outils de d\u00e9bogage pour inspecter les variables, ex\u00e9cuter du code pas \u00e0 pas, ajouter des points d'arr\u00eat, etc. Bien s\u00fbr, voici comment vous pouvez int\u00e9grer l'option de d\u00e9bogage PWDEBUG \u00e0 votre configuration :","title":"D\u00e9bogage de vos tests"},{"location":"DebugPlaywright/#ajout-de-loption-pwdebug-pour-le-debogage-de-playwright","text":"L'option PWDEBUG est une variable d'environnement qui peut \u00eatre utilis\u00e9e pour activer le mode de d\u00e9bogage de Playwright. Cette variable d'environnement active des fonctionnalit\u00e9s suppl\u00e9mentaires utiles lors du d\u00e9bogage de vos tests, comme l'arr\u00eat automatique avant chaque action Playwright, ce qui permet d'inspecter l'\u00e9tat du navigateur avant que l'action ne soit ex\u00e9cut\u00e9e. Voici comment vous pouvez l'ajouter \u00e0 votre configuration : Ouvrez votre package.json et ajoutez le script de d\u00e9bogage suivant dans la section scripts : \"scripts\": { \"test:debug\": \"PWDEBUG=1 playwright test\" } Votre package.json devrait ressembler \u00e0 quelque chose comme ceci: { \"name\": \"my-project\", \"version\": \"1.0.0\", \"description\": \"My Project Description\", \"main\": \"index.js\", \"scripts\": { \"test\": \"playwright test\", \"debug\": \"node --inspect-brk node_modules/.bin/playwright test\", \"test:debug\": \"PWDEBUG=1 playwright test\" }, \"keywords\": [], \"author\": \"\", \"license\": \"ISC\", \"dependencies\": { ... }, \"devDependencies\": { \"@playwright/test\": \"^1.14.1\", ... } } Pour ex\u00e9cuter vos tests en mode de d\u00e9bogage avec PWDEBUG , utilisez simplement la commande npm run test:debug dans votre terminal. Cela lancera les tests Playwright avec l'option PWDEBUG activ\u00e9e. Veuillez noter que lorsqu'il est utilis\u00e9 avec PWDEBUG=1 , Playwright s'arr\u00eate automatiquement avant chaque action et apr\u00e8s chaque navigation, ce qui vous permet d'inspecter l'\u00e9tat du navigateur. C'est extr\u00eamement utile lorsque vous essayez de comprendre pourquoi un test particulier \u00e9choue.","title":"Ajout de l'option PWDEBUG pour le d\u00e9bogage de Playwright"},{"location":"DependenciesManagement/","text":"Gestion des d\u00e9pendances Nous utilisons npm comme gestionnaire de paquets pour g\u00e9rer les d\u00e9pendances de notre projet. Pour installer les d\u00e9pendances, ex\u00e9cutez la commande suivante dans le r\u00e9pertoire de votre projet : npm install Vous pouvez ensuite ex\u00e9cuter vos tests en utilisant la commande : npm test.","title":"Gestion des d\u00e9pendances"},{"location":"DependenciesManagement/#gestion-des-dependances","text":"Nous utilisons npm comme gestionnaire de paquets pour g\u00e9rer les d\u00e9pendances de notre projet. Pour installer les d\u00e9pendances, ex\u00e9cutez la commande suivante dans le r\u00e9pertoire de votre projet : npm install Vous pouvez ensuite ex\u00e9cuter vos tests en utilisant la commande : npm test.","title":"Gestion des d\u00e9pendances"},{"location":"DetailedReportsLogs/","text":"Rapports et journaux Nous utilisons allure report pour les rapports HTML et winston pour les journaux d\u00e9taill\u00e9s. Ces outils fournissent une visibilit\u00e9 sur les r\u00e9sultats des tests et facilitent le processus de d\u00e9bogage.","title":"Rapports et Journaux d\u00e9taill\u00e9s"},{"location":"DetailedReportsLogs/#rapports-et-journaux","text":"Nous utilisons allure report pour les rapports HTML et winston pour les journaux d\u00e9taill\u00e9s. Ces outils fournissent une visibilit\u00e9 sur les r\u00e9sultats des tests et facilitent le processus de d\u00e9bogage.","title":"Rapports et journaux"},{"location":"EnvironmentConfigManagement/","text":"Configuration et gestion des environnements Nous utilisons des fichiers de configuration pour stocker les param\u00e8tres sp\u00e9cifiques \u00e0 chaque environnement, par exemple les URL et les identifiants de connexion. Ces param\u00e8tres sont charg\u00e9s dynamiquement en fonction de l'environnement d'ex\u00e9cution \u00e0 l'aide de variables d'environnement.","title":"Configuration et gestion des environnements"},{"location":"EnvironmentConfigManagement/#configuration-et-gestion-des-environnements","text":"Nous utilisons des fichiers de configuration pour stocker les param\u00e8tres sp\u00e9cifiques \u00e0 chaque environnement, par exemple les URL et les identifiants de connexion. Ces param\u00e8tres sont charg\u00e9s dynamiquement en fonction de l'environnement d'ex\u00e9cution \u00e0 l'aide de variables d'environnement.","title":"Configuration et gestion des environnements"},{"location":"LoginTestDetails/","text":"Analyse du code Le script se veut bien structur\u00e9 et devrait suivre les bonnes pratiques de codage pour les tests d'automatisation utilisant Playwright. En supposant que tous les s\u00e9lecteurs CSS (.dashboard et .error-message) sont corrects et que la page charg\u00e9e par Config.BASE_URL est la bonne, ce script devrait fonctionner comme pr\u00e9vu. Voici quelques points \u00e0 noter : Toutes les d\u00e9pendances n\u00e9cessaires sont import\u00e9es. Les tests sont bien organis\u00e9s en utilisant describe pour regrouper les tests li\u00e9s. Les fonctions beforeAll et afterAll sont utilis\u00e9es pour initialiser et nettoyer le navigateur, ce qui est une bonne pratique. Les informations d'identification valides et invalides sont prises \u00e0 partir de Config, ce qui indique que les valeurs ne sont pas cod\u00e9es en dur dans les tests. L'utilisation d'une Page Object (LoginPage) est une bonne pratique pour l'abstraction des d\u00e9tails d'interaction avec la page.","title":"Analyse du code et bonnes pratiques"},{"location":"LoginTestDetails/#analyse-du-code","text":"Le script se veut bien structur\u00e9 et devrait suivre les bonnes pratiques de codage pour les tests d'automatisation utilisant Playwright. En supposant que tous les s\u00e9lecteurs CSS (.dashboard et .error-message) sont corrects et que la page charg\u00e9e par Config.BASE_URL est la bonne, ce script devrait fonctionner comme pr\u00e9vu. Voici quelques points \u00e0 noter : Toutes les d\u00e9pendances n\u00e9cessaires sont import\u00e9es. Les tests sont bien organis\u00e9s en utilisant describe pour regrouper les tests li\u00e9s. Les fonctions beforeAll et afterAll sont utilis\u00e9es pour initialiser et nettoyer le navigateur, ce qui est une bonne pratique. Les informations d'identification valides et invalides sont prises \u00e0 partir de Config, ce qui indique que les valeurs ne sont pas cod\u00e9es en dur dans les tests. L'utilisation d'une Page Object (LoginPage) est une bonne pratique pour l'abstraction des d\u00e9tails d'interaction avec la page.","title":"Analyse du code"},{"location":"NetworkDependenciesManagement/","text":"Gestion des d\u00e9pendances r\u00e9seau Nous utilisons moxios pour g\u00e9rer les d\u00e9pendances r\u00e9seau dans nos tests. Cela permet d'isoler les appels r\u00e9seau et de simuler les r\u00e9ponses pour am\u00e9liorer la stabilit\u00e9 et la reproductibilit\u00e9 des tests.","title":"Gestion des d\u00e9pendances r\u00e9seau"},{"location":"NetworkDependenciesManagement/#gestion-des-dependances-reseau","text":"Nous utilisons moxios pour g\u00e9rer les d\u00e9pendances r\u00e9seau dans nos tests. Cela permet d'isoler les appels r\u00e9seau et de simuler les r\u00e9ponses pour am\u00e9liorer la stabilit\u00e9 et la reproductibilit\u00e9 des tests.","title":"Gestion des d\u00e9pendances r\u00e9seau"},{"location":"PageObjectArchitecture/","text":"Architecture Page Object Le code pr\u00e9sent\u00e9 ici suit l'architecture Page Object, une approche largement reconnue pour d\u00e9velopper des tests d'automatisation maintenables et \u00e9volutifs. Les fonctionnalit\u00e9s et les \u00e9l\u00e9ments du DOM sp\u00e9cifiques \u00e0 chaque page sont encapsul\u00e9s dans des classes d\u00e9di\u00e9es, \u00e0 savoir LoginPage .","title":"Utilisation de l'architecture Page Object"},{"location":"PageObjectArchitecture/#architecture-page-object","text":"Le code pr\u00e9sent\u00e9 ici suit l'architecture Page Object, une approche largement reconnue pour d\u00e9velopper des tests d'automatisation maintenables et \u00e9volutifs. Les fonctionnalit\u00e9s et les \u00e9l\u00e9ments du DOM sp\u00e9cifiques \u00e0 chaque page sont encapsul\u00e9s dans des classes d\u00e9di\u00e9es, \u00e0 savoir LoginPage .","title":"Architecture Page Object"},{"location":"RunningTests/","text":"Ex\u00e9cution des Tests Dans ce projet, nous utilisons Playwright pour ex\u00e9cuter nos tests. Voici une br\u00e8ve explication de comment vous pouvez ex\u00e9cuter les diff\u00e9rents scripts de test inclus dans le package.json . Pr\u00e9-requis Ex\u00e9cution des Tests Standards Pour ex\u00e9cuter les tests en mode standard, utilisez la commande suivante: npm run test Cette commande lance les tests \u00e0 l'aide de Playwright. Ex\u00e9cution des Tests en mode sans t\u00eate Si vous voulez ex\u00e9cuter les tests en mode sans t\u00eate, c'est-\u00e0-dire sans ouvrir une fen\u00eatre de navigateur, vous pouvez utiliser la commande suivante: npm run test:headless Ex\u00e9cution des Tests en mode Debug Si vous voulez d\u00e9boguer vos tests, vous pouvez utiliser la commande suivante qui lance les tests avec l'option PWDEBUG : npm run test:debug Cela va lancer Playwright en mode d\u00e9bogage, ce qui signifie que les tests s'arr\u00eateront \u00e0 chaque action pour vous permettre de voir ce qui se passe \u00e0 chaque \u00e9tape. Ex\u00e9cution des Tests en mode Debug avec Node Si vous voulez d\u00e9boguer vos tests en utilisant l'inspecteur de Node, utilisez la commande suivante: npm run debug Cela lance Node avec l'option inspect-brk qui arr\u00eate l'ex\u00e9cution du script avant le premier require() et permet \u00e0 un d\u00e9bogueur de se connecter avant que le code commence \u00e0 s'ex\u00e9cuter. G\u00e9n\u00e9ration de la Documentation Pour g\u00e9n\u00e9rer la documentation de code avec JSDoc, utilisez la commande suivante: npm run docs Cela va g\u00e9n\u00e9rer la documentation \u00e0 partir de vos commentaires de code en utilisant le fichier de configuration jsdoc.json .","title":"Ex\u00e9cution des tests"},{"location":"RunningTests/#execution-des-tests","text":"Dans ce projet, nous utilisons Playwright pour ex\u00e9cuter nos tests. Voici une br\u00e8ve explication de comment vous pouvez ex\u00e9cuter les diff\u00e9rents scripts de test inclus dans le package.json . Pr\u00e9-requis","title":"Ex\u00e9cution des Tests"},{"location":"RunningTests/#execution-des-tests-standards","text":"Pour ex\u00e9cuter les tests en mode standard, utilisez la commande suivante: npm run test Cette commande lance les tests \u00e0 l'aide de Playwright.","title":"Ex\u00e9cution des Tests Standards"},{"location":"RunningTests/#execution-des-tests-en-mode-sans-tete","text":"Si vous voulez ex\u00e9cuter les tests en mode sans t\u00eate, c'est-\u00e0-dire sans ouvrir une fen\u00eatre de navigateur, vous pouvez utiliser la commande suivante: npm run test:headless","title":"Ex\u00e9cution des Tests en mode sans t\u00eate"},{"location":"RunningTests/#execution-des-tests-en-mode-debug","text":"Si vous voulez d\u00e9boguer vos tests, vous pouvez utiliser la commande suivante qui lance les tests avec l'option PWDEBUG : npm run test:debug Cela va lancer Playwright en mode d\u00e9bogage, ce qui signifie que les tests s'arr\u00eateront \u00e0 chaque action pour vous permettre de voir ce qui se passe \u00e0 chaque \u00e9tape.","title":"Ex\u00e9cution des Tests en mode Debug"},{"location":"RunningTests/#execution-des-tests-en-mode-debug-avec-node","text":"Si vous voulez d\u00e9boguer vos tests en utilisant l'inspecteur de Node, utilisez la commande suivante: npm run debug Cela lance Node avec l'option inspect-brk qui arr\u00eate l'ex\u00e9cution du script avant le premier require() et permet \u00e0 un d\u00e9bogueur de se connecter avant que le code commence \u00e0 s'ex\u00e9cuter.","title":"Ex\u00e9cution des Tests en mode Debug avec Node"},{"location":"RunningTests/#generation-de-la-documentation","text":"Pour g\u00e9n\u00e9rer la documentation de code avec JSDoc, utilisez la commande suivante: npm run docs Cela va g\u00e9n\u00e9rer la documentation \u00e0 partir de vos commentaires de code en utilisant le fichier de configuration jsdoc.json .","title":"G\u00e9n\u00e9ration de la Documentation"},{"location":"Script-checkDependencies-doc/","text":"Documentation : Script checkDependencies.mjs Le script checkDependencies.mjs permet de v\u00e9rifier si les d\u00e9pendances n\u00e9cessaires \u00e0 Playwright (Chromium, Firefox, WebKit) sont correctement install\u00e9es. Utilisation Assurez-vous d'avoir install\u00e9 Playwright en ex\u00e9cutant la commande suivante : npm install playwright Ex\u00e9cutez le script en utilisant la commande suivante : node --experimental-modules checkDependencies.mjs Fonctions Le script contient deux fonctions principales : checkDependencies Elle tente d'obtenir les chemins d'ex\u00e9cution des navigateurs (Chromium, Firefox, WebKit) \u00e0 l'aide des m\u00e9thodes executablePath fournies par Playwright. run La fonction run est utilis\u00e9e pour ex\u00e9cuter la v\u00e9rification des d\u00e9pendances et effectuer d'autres op\u00e9rations si n\u00e9cessaire, comme l'ex\u00e9cution de tests.","title":"Utilisation des scripts suite"},{"location":"Script-checkDependencies-doc/#documentation-script-checkdependenciesmjs","text":"Le script checkDependencies.mjs permet de v\u00e9rifier si les d\u00e9pendances n\u00e9cessaires \u00e0 Playwright (Chromium, Firefox, WebKit) sont correctement install\u00e9es.","title":"Documentation : Script checkDependencies.mjs"},{"location":"Script-checkDependencies-doc/#utilisation","text":"Assurez-vous d'avoir install\u00e9 Playwright en ex\u00e9cutant la commande suivante : npm install playwright Ex\u00e9cutez le script en utilisant la commande suivante : node --experimental-modules checkDependencies.mjs","title":"Utilisation"},{"location":"Script-checkDependencies-doc/#fonctions","text":"Le script contient deux fonctions principales :","title":"Fonctions"},{"location":"Script-checkDependencies-doc/#checkdependencies","text":"Elle tente d'obtenir les chemins d'ex\u00e9cution des navigateurs (Chromium, Firefox, WebKit) \u00e0 l'aide des m\u00e9thodes executablePath fournies par Playwright.","title":"checkDependencies"},{"location":"Script-checkDependencies-doc/#run","text":"La fonction run est utilis\u00e9e pour ex\u00e9cuter la v\u00e9rification des d\u00e9pendances et effectuer d'autres op\u00e9rations si n\u00e9cessaire, comme l'ex\u00e9cution de tests.","title":"run"},{"location":"TestDataManagement/","text":"Gestion des donn\u00e9es de test Nous utilisons diff\u00e9rents jeux de donn\u00e9es pour couvrir diff\u00e9rents sc\u00e9narios de test. Ces jeux de donn\u00e9es sont stock\u00e9s dans des fichiers externes, tels que des fichiers JSON ou CSV, et sont charg\u00e9s dynamiquement lors de l'ex\u00e9cution des tests.","title":"Gestion des donn\u00e9es de test"},{"location":"TestDataManagement/#gestion-des-donnees-de-test","text":"Nous utilisons diff\u00e9rents jeux de donn\u00e9es pour couvrir diff\u00e9rents sc\u00e9narios de test. Ces jeux de donn\u00e9es sont stock\u00e9s dans des fichiers externes, tels que des fichiers JSON ou CSV, et sont charg\u00e9s dynamiquement lors de l'ex\u00e9cution des tests.","title":"Gestion des donn\u00e9es de test"},{"location":"about/","text":"Visualisation de votre documentation : MkDocs comprend un serveur de d\u00e9veloppement int\u00e9gr\u00e9 qui vous permet de pr\u00e9visualiser votre documentation pendant que vous l'\u00e9crivez. Pour d\u00e9marrer le serveur, acc\u00e9dez \u00e0 votre dossier de projet via le terminal et ex\u00e9cutez : mkdocs serve Vous pouvez maintenant voir votre documentation en ouvrant votre navigateur Web \u00e0 http://localhost:8000. D\u00e9ploiement de votre documentation : Une fois que vous avez termin\u00e9 d'\u00e9crire votre documentation, vous pouvez la d\u00e9ployer sur GitHub Pages, GitLab Pages, ou un autre service d'h\u00e9bergement de votre choix. Pour d\u00e9ployer sur GitHub Pages, ex\u00e9cutez la commande suivante : mkdocs gh-deploy Cette commande cr\u00e9e une nouvelle branche gh-pages dans votre d\u00e9p\u00f4t Git, construit votre documentation et la pousse vers GitHub. N'oubliez pas d'ajouter et de commettre tous les changements dans votre d\u00e9p\u00f4t Git avant de d\u00e9ployer. Installez MkDocs si ce n'est pas d\u00e9j\u00e0 fait : - V\u00e9rifiez si Python est install\u00e9 : python --version ou python3 --version - Installez Python si n\u00e9cessaire : ous pouvez le t\u00e9l\u00e9charger et l'installer \u00e0 partir du site officiel de Python. Lors de l'installation, assurez-vous de cocher l'option \"Add Python to PATH\" avant de cliquer sur \"Install Now\". - V\u00e9rifiez si pip est install\u00e9 :Une fois Python install\u00e9, vous pouvez v\u00e9rifier si pip est install\u00e9 en ex\u00e9cutant la commande pip --version ou pip3 --version. Si pip est install\u00e9, vous devriez voir la version de pip affich\u00e9e. - Installez pip si n\u00e9cessaire : Si pip n'est pas install\u00e9, vous pouvez le t\u00e9l\u00e9charger et l'installer en suivant les instructions sur le site officiel de pip. - Utilisez le bon pr\u00e9fixe de commande : Notez que si Python 3 est install\u00e9 sur votre syst\u00e8me, vous devrez peut-\u00eatre utiliser pip3 et python3 au lieu de pip et python respectivement. - Essayez \u00e0 nouveau d'installer MkDocs : Une fois Python et pip install\u00e9s, essayez \u00e0 nouveau d'installer MkDocs en utilisant la commande pip install mkdocs 'ou' pip3 install mkdocs","title":"Documentation"},{"location":"about/#visualisation-de-votre-documentation","text":"MkDocs comprend un serveur de d\u00e9veloppement int\u00e9gr\u00e9 qui vous permet de pr\u00e9visualiser votre documentation pendant que vous l'\u00e9crivez. Pour d\u00e9marrer le serveur, acc\u00e9dez \u00e0 votre dossier de projet via le terminal et ex\u00e9cutez : mkdocs serve Vous pouvez maintenant voir votre documentation en ouvrant votre navigateur Web \u00e0 http://localhost:8000.","title":"Visualisation de votre documentation :"},{"location":"about/#deploiement-de-votre-documentation","text":"Une fois que vous avez termin\u00e9 d'\u00e9crire votre documentation, vous pouvez la d\u00e9ployer sur GitHub Pages, GitLab Pages, ou un autre service d'h\u00e9bergement de votre choix. Pour d\u00e9ployer sur GitHub Pages, ex\u00e9cutez la commande suivante : mkdocs gh-deploy Cette commande cr\u00e9e une nouvelle branche gh-pages dans votre d\u00e9p\u00f4t Git, construit votre documentation et la pousse vers GitHub. N'oubliez pas d'ajouter et de commettre tous les changements dans votre d\u00e9p\u00f4t Git avant de d\u00e9ployer.","title":"D\u00e9ploiement de votre documentation :"},{"location":"about/#_1","text":"Installez MkDocs si ce n'est pas d\u00e9j\u00e0 fait : - V\u00e9rifiez si Python est install\u00e9 : python --version ou python3 --version - Installez Python si n\u00e9cessaire : ous pouvez le t\u00e9l\u00e9charger et l'installer \u00e0 partir du site officiel de Python. Lors de l'installation, assurez-vous de cocher l'option \"Add Python to PATH\" avant de cliquer sur \"Install Now\". - V\u00e9rifiez si pip est install\u00e9 :Une fois Python install\u00e9, vous pouvez v\u00e9rifier si pip est install\u00e9 en ex\u00e9cutant la commande pip --version ou pip3 --version. Si pip est install\u00e9, vous devriez voir la version de pip affich\u00e9e. - Installez pip si n\u00e9cessaire : Si pip n'est pas install\u00e9, vous pouvez le t\u00e9l\u00e9charger et l'installer en suivant les instructions sur le site officiel de pip. - Utilisez le bon pr\u00e9fixe de commande : Notez que si Python 3 est install\u00e9 sur votre syst\u00e8me, vous devrez peut-\u00eatre utiliser pip3 et python3 au lieu de pip et python respectivement. - Essayez \u00e0 nouveau d'installer MkDocs : Une fois Python et pip install\u00e9s, essayez \u00e0 nouveau d'installer MkDocs en utilisant la commande pip install mkdocs 'ou' pip3 install mkdocs","title":""},{"location":"project-info-doc/","text":"Documentation du script Project Info Cette documentation fournit des informations sur le script \"project-info.mjs\". Contexte Le script \"project-info.mjs\" est un outil utile pour obtenir des informations sur votre environnement de d\u00e9veloppement, les d\u00e9pendances de votre projet et la structure de votre projet. Il peut \u00eatre ex\u00e9cut\u00e9 dans divers contextes pour faciliter la configuration, la gestion des d\u00e9pendances et le d\u00e9bogage de votre projet. Voici quelques cas d'utilisation courants : V\u00e9rification de l'environnement : Lorsque vous commencez \u00e0 travailler sur un nouveau syst\u00e8me ou \u00e0 collaborer avec d'autres d\u00e9veloppeurs, il est important de s'assurer que l'environnement est correctement configur\u00e9. En ex\u00e9cutant le script \"project-info.mjs\", vous obtiendrez rapidement des informations sur : Le syst\u00e8me d'exploitation : Vous saurez sur quel syst\u00e8me d'exploitation vous travaillez, que ce soit Windows, macOS ou Linux. La version de Node.js : Vous conna\u00eetrez la version de Node.js install\u00e9e sur votre syst\u00e8me. Les versions des navigateurs Playwright : Vous saurez quelles versions de Chromium, Firefox et WebKit sont utilis\u00e9es par Playwright. Ces informations vous aideront \u00e0 v\u00e9rifier si votre environnement r\u00e9pond aux exigences de votre projet et \u00e0 prendre les mesures n\u00e9cessaires le cas \u00e9ch\u00e9ant. Gestion des d\u00e9pendances : Le script \"project-info.mjs\" peut \u00e9galement \u00eatre utilis\u00e9 pour examiner les d\u00e9pendances de votre projet. En affichant la structure du projet, vous pouvez facilement rep\u00e9rer les r\u00e9pertoires tels que \"node_modules\" qui contiennent les d\u00e9pendances externes. Cela vous permet de : V\u00e9rifier la pr\u00e9sence des d\u00e9pendances : Vous pouvez vous assurer que toutes les d\u00e9pendances n\u00e9cessaires sont pr\u00e9sentes dans votre projet. V\u00e9rifier la configuration des d\u00e9pendances : Vous pouvez v\u00e9rifier si les d\u00e9pendances sont correctement install\u00e9es et configur\u00e9es. Cela facilite la gestion des d\u00e9pendances et vous permet de vous assurer que votre projet dispose des ressources n\u00e9cessaires pour fonctionner correctement. Analyse de la structure du projet : La structure du projet est essentielle pour une organisation claire et une navigation facile entre les fichiers. Le script \"project-info.mjs\" g\u00e9n\u00e8re une repr\u00e9sentation arborescente de la structure de votre projet, ce qui vous permet de : Visualiser l'organisation des fichiers et des r\u00e9pertoires : Vous pouvez rapidement identifier la hi\u00e9rarchie des dossiers et des fichiers dans votre projet. Rep\u00e9rer des fichiers sp\u00e9cifiques : Vous pouvez utiliser la structure pour localiser rapidement des fichiers sp\u00e9cifiques dans votre projet. Comprendre la hi\u00e9rarchie du projet : Vous pouvez mieux comprendre comment les diff\u00e9rents \u00e9l\u00e9ments de votre projet sont organis\u00e9s et interagissent les uns avec les autres. Cela facilite la navigation et la gestion de votre projet, en vous permettant de localiser rapidement les fichiers et d'avoir une vue d'ensemble de la structure. D\u00e9bogage et investigation : Lorsque vous rencontrez des probl\u00e8mes ou des erreurs dans votre projet, le script \"project-info.mjs\" peut vous fournir des informations suppl\u00e9mentaires pour le d\u00e9bogage et l'investigation. Les d\u00e9tails sur l'environnement et la configuration du projet peuvent aider \u00e0 : Diagnostiquer les probl\u00e8mes : Les informations sur l'environnement et les versions des navigateurs peuvent vous aider \u00e0 identifier les causes possibles des probl\u00e8mes que vous rencontrez. R\u00e9soudre les probl\u00e8mes plus rapidement : En comprenant mieux l'environnement et la configuration, vous pouvez prendre des mesures plus cibl\u00e9es pour r\u00e9soudre les probl\u00e8mes, ce qui permet d'acc\u00e9l\u00e9rer le processus de r\u00e9solution des probl\u00e8mes. En r\u00e9sum\u00e9, le script \"project-info.mjs\" est un outil polyvalent qui fournit des informations essentielles sur l'environnement, les d\u00e9pendances et la structure de votre projet. Il peut \u00eatre utilis\u00e9 pour la v\u00e9rification de l'environnement, la gestion des d\u00e9pendances, l'analyse de la structure du projet et le d\u00e9bogage. En l'ex\u00e9cutant dans le contexte de votre projet, vous pouvez obtenir une meilleure compr\u00e9hension de votre environnement de d\u00e9veloppement et faciliter la gestion et la r\u00e9solution des probl\u00e8mes li\u00e9s \u00e0 votre projet. Pr\u00e9requis Node.js doit \u00eatre install\u00e9 sur votre syst\u00e8me. Les d\u00e9pendances requises doivent \u00eatre install\u00e9es. Vous pouvez les installer en ex\u00e9cutant la commande suivante depuis la racine du projet : npm install Utilisation Ex\u00e9cutez la commande suivante pour afficher les informations sur le projet : node --experimental-modules scripts/project-info.mjs Assurez-vous d'ex\u00e9cuter cette commande depuis la racine du projet. Sortie Le script affichera les informations suivantes : Syst\u00e8me d'exploitation : le syst\u00e8me d'exploitation sur lequel vous ex\u00e9cutez le script. Version de Node.js : la version de Node.js install\u00e9e sur votre syst\u00e8me. Versions des navigateurs Playwright : les versions de Chromium, Firefox et WebKit utilis\u00e9es par Playwright. Structure du projet : une repr\u00e9sentation en arborescence de la structure de votre projet, y compris les fichiers et les r\u00e9pertoires. Exclusion des r\u00e9pertoires Le script exclut certains r\u00e9pertoires par d\u00e9faut de la structure du projet, tels que \"node_modules\", \".idea\", \"external\", \"libraries\" et \"scratches and consoles\". Si vous souhaitez exclure d'autres r\u00e9pertoires, vous pouvez les ajouter \u00e0 la liste excludedDirs dans le fichier \"project-info.mjs\".","title":"Utilisation des scripts"},{"location":"project-info-doc/#documentation-du-script-project-info","text":"Cette documentation fournit des informations sur le script \"project-info.mjs\".","title":"Documentation du script Project Info"},{"location":"project-info-doc/#contexte","text":"Le script \"project-info.mjs\" est un outil utile pour obtenir des informations sur votre environnement de d\u00e9veloppement, les d\u00e9pendances de votre projet et la structure de votre projet. Il peut \u00eatre ex\u00e9cut\u00e9 dans divers contextes pour faciliter la configuration, la gestion des d\u00e9pendances et le d\u00e9bogage de votre projet. Voici quelques cas d'utilisation courants : V\u00e9rification de l'environnement : Lorsque vous commencez \u00e0 travailler sur un nouveau syst\u00e8me ou \u00e0 collaborer avec d'autres d\u00e9veloppeurs, il est important de s'assurer que l'environnement est correctement configur\u00e9. En ex\u00e9cutant le script \"project-info.mjs\", vous obtiendrez rapidement des informations sur : Le syst\u00e8me d'exploitation : Vous saurez sur quel syst\u00e8me d'exploitation vous travaillez, que ce soit Windows, macOS ou Linux. La version de Node.js : Vous conna\u00eetrez la version de Node.js install\u00e9e sur votre syst\u00e8me. Les versions des navigateurs Playwright : Vous saurez quelles versions de Chromium, Firefox et WebKit sont utilis\u00e9es par Playwright. Ces informations vous aideront \u00e0 v\u00e9rifier si votre environnement r\u00e9pond aux exigences de votre projet et \u00e0 prendre les mesures n\u00e9cessaires le cas \u00e9ch\u00e9ant. Gestion des d\u00e9pendances : Le script \"project-info.mjs\" peut \u00e9galement \u00eatre utilis\u00e9 pour examiner les d\u00e9pendances de votre projet. En affichant la structure du projet, vous pouvez facilement rep\u00e9rer les r\u00e9pertoires tels que \"node_modules\" qui contiennent les d\u00e9pendances externes. Cela vous permet de : V\u00e9rifier la pr\u00e9sence des d\u00e9pendances : Vous pouvez vous assurer que toutes les d\u00e9pendances n\u00e9cessaires sont pr\u00e9sentes dans votre projet. V\u00e9rifier la configuration des d\u00e9pendances : Vous pouvez v\u00e9rifier si les d\u00e9pendances sont correctement install\u00e9es et configur\u00e9es. Cela facilite la gestion des d\u00e9pendances et vous permet de vous assurer que votre projet dispose des ressources n\u00e9cessaires pour fonctionner correctement. Analyse de la structure du projet : La structure du projet est essentielle pour une organisation claire et une navigation facile entre les fichiers. Le script \"project-info.mjs\" g\u00e9n\u00e8re une repr\u00e9sentation arborescente de la structure de votre projet, ce qui vous permet de : Visualiser l'organisation des fichiers et des r\u00e9pertoires : Vous pouvez rapidement identifier la hi\u00e9rarchie des dossiers et des fichiers dans votre projet. Rep\u00e9rer des fichiers sp\u00e9cifiques : Vous pouvez utiliser la structure pour localiser rapidement des fichiers sp\u00e9cifiques dans votre projet. Comprendre la hi\u00e9rarchie du projet : Vous pouvez mieux comprendre comment les diff\u00e9rents \u00e9l\u00e9ments de votre projet sont organis\u00e9s et interagissent les uns avec les autres. Cela facilite la navigation et la gestion de votre projet, en vous permettant de localiser rapidement les fichiers et d'avoir une vue d'ensemble de la structure. D\u00e9bogage et investigation : Lorsque vous rencontrez des probl\u00e8mes ou des erreurs dans votre projet, le script \"project-info.mjs\" peut vous fournir des informations suppl\u00e9mentaires pour le d\u00e9bogage et l'investigation. Les d\u00e9tails sur l'environnement et la configuration du projet peuvent aider \u00e0 : Diagnostiquer les probl\u00e8mes : Les informations sur l'environnement et les versions des navigateurs peuvent vous aider \u00e0 identifier les causes possibles des probl\u00e8mes que vous rencontrez. R\u00e9soudre les probl\u00e8mes plus rapidement : En comprenant mieux l'environnement et la configuration, vous pouvez prendre des mesures plus cibl\u00e9es pour r\u00e9soudre les probl\u00e8mes, ce qui permet d'acc\u00e9l\u00e9rer le processus de r\u00e9solution des probl\u00e8mes. En r\u00e9sum\u00e9, le script \"project-info.mjs\" est un outil polyvalent qui fournit des informations essentielles sur l'environnement, les d\u00e9pendances et la structure de votre projet. Il peut \u00eatre utilis\u00e9 pour la v\u00e9rification de l'environnement, la gestion des d\u00e9pendances, l'analyse de la structure du projet et le d\u00e9bogage. En l'ex\u00e9cutant dans le contexte de votre projet, vous pouvez obtenir une meilleure compr\u00e9hension de votre environnement de d\u00e9veloppement et faciliter la gestion et la r\u00e9solution des probl\u00e8mes li\u00e9s \u00e0 votre projet.","title":"Contexte"},{"location":"project-info-doc/#prerequis","text":"Node.js doit \u00eatre install\u00e9 sur votre syst\u00e8me. Les d\u00e9pendances requises doivent \u00eatre install\u00e9es. Vous pouvez les installer en ex\u00e9cutant la commande suivante depuis la racine du projet : npm install","title":"Pr\u00e9requis"},{"location":"project-info-doc/#utilisation","text":"Ex\u00e9cutez la commande suivante pour afficher les informations sur le projet : node --experimental-modules scripts/project-info.mjs Assurez-vous d'ex\u00e9cuter cette commande depuis la racine du projet.","title":"Utilisation"},{"location":"project-info-doc/#sortie","text":"Le script affichera les informations suivantes : Syst\u00e8me d'exploitation : le syst\u00e8me d'exploitation sur lequel vous ex\u00e9cutez le script. Version de Node.js : la version de Node.js install\u00e9e sur votre syst\u00e8me. Versions des navigateurs Playwright : les versions de Chromium, Firefox et WebKit utilis\u00e9es par Playwright. Structure du projet : une repr\u00e9sentation en arborescence de la structure de votre projet, y compris les fichiers et les r\u00e9pertoires. Exclusion des r\u00e9pertoires Le script exclut certains r\u00e9pertoires par d\u00e9faut de la structure du projet, tels que \"node_modules\", \".idea\", \"external\", \"libraries\" et \"scratches and consoles\". Si vous souhaitez exclure d'autres r\u00e9pertoires, vous pouvez les ajouter \u00e0 la liste excludedDirs dans le fichier \"project-info.mjs\".","title":"Sortie"},{"location":"test-management/","text":"Playwright + Test Runner + Allure Reporter : Suivi des plans de test et liaison des scripts de test Ce guide vous guidera dans l'organisation de vos plans de test et scripts de test dans le cadre de l'utilisation de la stack Playwright + Test Runner + Allure Reporter. Table des mati\u00e8res Introduction Organisation des plans de test Liaison aux scripts de test Suivi des modifications Scripts utilitaires personnalis\u00e9s Exemple : Plan de test pour la page de connexion Introduction Pour le suivi des plans de test et la liaison des scripts de test, nous allons utiliser un outil de gestion de versions comme Git et des fichiers de configuration sp\u00e9cifiques. Organisation des plans de test Cr\u00e9ez un r\u00e9pertoire dans votre projet pour stocker les fichiers de plans de test. Vous pouvez organiser les fichiers de plan de test en utilisant une structure hi\u00e9rarchique. Chaque fichier de plan de test peut contenir les d\u00e9tails sp\u00e9cifiques du test, les cas de test associ\u00e9s et les informations de liaison aux scripts de test. Dans notre projet de d\u00e9monstration, nous avons le r\u00e9pertoire suivant pour nos plans de test : src/ \u251c\u2500\u2500 test-plans/ \u2502 \u2514\u2500\u2500 login-plan.md \u2502 \u2514\u2500\u2500 password-recovery-plan.md \u2502 \u2514\u2500\u2500 registration-plan.md Liaison aux scripts de test Dans chaque fichier de plan de test, vous pouvez ajouter des m\u00e9tadonn\u00e9es ou des annotations sp\u00e9ciales pour lier le plan de test aux scripts de test correspondants. Vous pouvez utiliser des r\u00e9f\u00e9rences, des noms de fichiers ou d'autres identifiants uniques pour identifier les scripts de test associ\u00e9s \u00e0 chaque cas de test. Suivi des modifications Utilisez Git pour g\u00e9rer les versions et les modifications des fichiers de plan de test et des scripts de test. Chaque fois qu'un script de test est modifi\u00e9 ou ajout\u00e9, assurez-vous de mettre \u00e0 jour les informations de liaison dans les fichiers de plan de test correspondants. Vous pouvez \u00e9galement utiliser des branches ou des balises Git pour marquer les versions sp\u00e9cifiques des plans de test et des scripts de test. Scripts utilitaires personnalis\u00e9s Vous pouvez d\u00e9velopper des scripts utilitaires personnalis\u00e9s qui exploitent les informations des fichiers de plan de test et des scripts de test pour automatiser des t\u00e2ches telles que la g\u00e9n\u00e9ration de rapports, la v\u00e9rification de la coh\u00e9rence entre les plans de test et les scripts de test, etc. Ces scripts peuvent \u00eatre ex\u00e9cut\u00e9s en ligne de commande et int\u00e9gr\u00e9s \u00e0 votre pipeline de test. Exemple : Plan de test pour la page de connexion Voyons un exemple de plan de test pour la page de connexion. Vous pouvez trouver ce plan de test dans src/test-plans/login-plan.md. # Plan de test - Page de connexion Ce document d\u00e9crit les tests associ\u00e9s \u00e0 la page de connexion de l'application. Assurez-vous de mettre \u00e0 jour ce document avec les d\u00e9tails sp\u00e9cifiques de chaque test li\u00e9 \u00e0 la page de connexion. Ce document peut \u00eatre compl\u00e9t\u00e9 avec d'autres tests associ\u00e9s \u00e0 la page de connexion. Vous pouvez ajouter des sections suppl\u00e9mentaires pour d\u00e9crire d'autres sc\u00e9narios de test, des cas d'utilisation sp\u00e9cifiques, des conditions de r\u00e9ussite, etc. ## Liaison aux scripts de test Les scripts de test suivants sont associ\u00e9s aux cas de test sp\u00e9cifiques dans ce plan de test : - Suite de tests : `@error-handling-tests` - Cas de test [test-LP1 - v\u00e9rifie le comportement de l'application en cas d'erreur et enregistre la trace de la pile pour un suivi plus d\u00e9taill\u00e9.](src/tests/login/error-handling.spec.mjs:31) - Suite de tests : `@invalid-login-tests` - Cas de test [test-LP2 - v\u00e9rifie que le formulaire de connexion ne peut pas \u00eatre soumis avec un email invalide.](src/tests/login/invalid-login.spec.mjs:31) - Cas de test [test-LP3 - v\u00e9rifie que la page de connexion n'affiche pas le champ du mot de passe lorsqu'un email inconnu est saisi.](src/tests/login/invalid-login.spec.mjs:45) - Cas de test [test-LP4 - v\u00e9rifie que la connexion \u00e9choue lorsque l'utilisateur saisit un email valide mais un mot de passe invalide.](src/tests/login/invalid-login.spec.mjs:60) - Suite de tests : `@successful-login-tests` - Cas de test [test-LP5 - v\u00e9rifie que l'utilisateur peut se connecter avec des identifiants valides et que la connexion est r\u00e9ussie.](src/tests/login/invalid-login.spec.mjs:31) - Cas de test [test-LP6 - v\u00e9rifie que la session utilisateur est maintenue apr\u00e8s une reconnexion.](src/tests/login/invalid-login.spec.mjs:45) ## Test : Gestion des erreurs et journalisation de la trace de la pile **Objectif du test** : Tester le m\u00e9canisme de gestion des erreurs et la journalisation de la trace de la pile. **Description** : Ce test v\u00e9rifie le comportement de l'application en cas d'erreur et enregistre la trace de la pile pour un suivi plus d\u00e9taill\u00e9. Le test simule une erreur en essayant de cliquer sur un \u00e9l\u00e9ment invalide. L'objectif est de v\u00e9rifier si une erreur est effectivement g\u00e9n\u00e9r\u00e9e, de journaliser l'erreur et sa trace de pile, et de s'assurer que malgr\u00e9 l'erreur, l'utilisateur est toujours connect\u00e9. **\u00c9tapes du test** : 1. Pr\u00e9paration : Configurer le navigateur avec un d\u00e9lai d'attente par d\u00e9faut et charger la page de connexion. 2. Remplir le formulaire de connexion avec un nom d'utilisateur et un mot de passe valides. 3. Soumettre le formulaire de connexion. 4. Essayer de cliquer sur un \u00e9l\u00e9ment invalide. 5. G\u00e9rer l'erreur en journalisant l'erreur et la trace de la pile. 6. Effectuer une assertion pour s'assurer que l'erreur est effectivement survenue. 7. V\u00e9rifier que l'utilisateur est toujours connect\u00e9. --- ## Test : Gestion des connexions invalides **Objectif du test** : V\u00e9rifier le comportement de l'application en cas de tentatives de connexion invalides. **Description** : Cette suite de tests vise \u00e0 valider le comportement de l'application lorsque des tentatives de connexion invalides sont effectu\u00e9es. Il comprend plusieurs cas de test pour g\u00e9rer diff\u00e9rentes situations d'erreur lors de la tentative de connexion. ### Cas de test 1 : Ne pas soumettre le formulaire avec un email invalide **Description** : Ce cas de test v\u00e9rifie que le formulaire de connexion ne peut pas \u00eatre soumis avec un email invalide. **\u00c9tapes du test** : 1. Pr\u00e9paration : Configurer le navigateur avec un d\u00e9lai d'attente par d\u00e9faut et charger la page de connexion. 2. Remplir le champ de l'email avec un email invalide. 3. V\u00e9rifier que le bouton \"Continuer\" est visible. 4. Cliquer sur le bouton \"Continuer\". 5. V\u00e9rifier que le message d'erreur s'affiche. ### Cas de test 2 : Afficher la page d'inscription pour un email inconnu **Description** : Ce cas de test v\u00e9rifie que la page de connexion n'affiche pas le champ du mot de passe lorsqu'un email inconnu est saisi, et qu'elle affiche plut\u00f4t la page d'inscription. **\u00c9tapes du test** : 1. Pr\u00e9paration : Configurer le navigateur avec un d\u00e9lai d'attente par d\u00e9faut et charger la page de connexion. 2. Remplir le champ de l'email avec un email inconnu. 3. V\u00e9rifier que le bouton \"Continuer\" est visible. 4. Cliquer sur le bouton \"Continuer\". 5. V\u00e9rifier que la page d'inscription est visible. ### Cas de test 3 : \u00c9chec de la connexion avec un email valide mais un mot de passe invalide **Description** : Ce cas de test v\u00e9rifie que la connexion \u00e9choue lorsque l'utilisateur saisit un email valide mais un mot de passe invalide. **\u00c9tapes du test** : 1. Pr\u00e9paration : Configurer le navigateur avec un d\u00e9lai d'attente par d\u00e9faut et charger la page de connexion. 2. Remplir le formulaire de connexion avec un email valide et un mot de passe invalide. 3. Soumettre le formulaire de connexion. 4. V\u00e9rifier que l'utilisateur n'est pas connect\u00e9. --- ## Test : Connexion r\u00e9ussie **Objectif du test** : V\u00e9rifier le comportement de l'application lors d'une connexion r\u00e9ussie et la persistence de la session utilisateur. **Description** : Ce test suite vise \u00e0 valider le comportement de l'application lorsqu'une connexion r\u00e9ussie est effectu\u00e9e. Il comprend plusieurs cas de test pour v\u00e9rifier que l'utilisateur peut se connecter avec des informations valides et que sa session est maintenue apr\u00e8s une reconnexion. ### Cas de test 1 : Connexion r\u00e9ussie avec des identifiants valides **Description** : Ce cas de test v\u00e9rifie que l'utilisateur peut se connecter avec des identifiants valides et que la connexion est r\u00e9ussie. **\u00c9tapes du test** : 1. Pr\u00e9paration : Configurer le navigateur avec un d\u00e9lai d'attente par d\u00e9faut et charger la page de connexion. 2. Remplir le formulaire de connexion avec un nom d'utilisateur et un mot de passe valides. 3. Soumettre le formulaire de connexion. 4. V\u00e9rifier que l'utilisateur est connect\u00e9 en utilisant la m\u00e9thode `isLoggedIn(page)` de `loginPage`. 5. R\u00e9cup\u00e9rer l'utilisateur connect\u00e9 \u00e0 l'aide de la m\u00e9thode `getLoggedInUser(page)` de `loginPage`. 6. V\u00e9rifier que l'utilisateur connect\u00e9 correspond \u00e0 l'utilisateur attendu. ### Cas de test 2 : Persistence de la session utilisateur apr\u00e8s reconnexion **Description** : Ce cas de test v\u00e9rifie que la session utilisateur est maintenue apr\u00e8s une reconnexion. **\u00c9tapes du test** : 1. Pr\u00e9paration : Configurer le navigateur avec un d\u00e9lai d'attente par d\u00e9faut et charger la page de connexion. 2. Remplir le formulaire de connexion avec des identifiants valides. 3. Soumettre le formulaire de connexion. 4. V\u00e9rifier que l'utilisateur est connect\u00e9 en utilisant la m\u00e9thode `isLoggedIn(page)` de `loginPage`. 5. Recharger la page. 6. V\u00e9rifier que l'utilisateur est toujours connect\u00e9 en utilisant la m\u00e9thode `isLoggedIn(page)` de `loginPage`. ---","title":"Test management"},{"location":"test-management/#playwright-test-runner-allure-reporter-suivi-des-plans-de-test-et-liaison-des-scripts-de-test","text":"Ce guide vous guidera dans l'organisation de vos plans de test et scripts de test dans le cadre de l'utilisation de la stack Playwright + Test Runner + Allure Reporter.","title":"Playwright + Test Runner + Allure Reporter : Suivi des plans de test et liaison des scripts de test"},{"location":"test-management/#table-des-matieres","text":"Introduction Organisation des plans de test Liaison aux scripts de test Suivi des modifications Scripts utilitaires personnalis\u00e9s Exemple : Plan de test pour la page de connexion","title":"Table des mati\u00e8res"},{"location":"test-management/#introduction","text":"Pour le suivi des plans de test et la liaison des scripts de test, nous allons utiliser un outil de gestion de versions comme Git et des fichiers de configuration sp\u00e9cifiques.","title":"Introduction"},{"location":"test-management/#organisation-des-plans-de-test","text":"Cr\u00e9ez un r\u00e9pertoire dans votre projet pour stocker les fichiers de plans de test. Vous pouvez organiser les fichiers de plan de test en utilisant une structure hi\u00e9rarchique. Chaque fichier de plan de test peut contenir les d\u00e9tails sp\u00e9cifiques du test, les cas de test associ\u00e9s et les informations de liaison aux scripts de test. Dans notre projet de d\u00e9monstration, nous avons le r\u00e9pertoire suivant pour nos plans de test : src/ \u251c\u2500\u2500 test-plans/ \u2502 \u2514\u2500\u2500 login-plan.md \u2502 \u2514\u2500\u2500 password-recovery-plan.md \u2502 \u2514\u2500\u2500 registration-plan.md","title":"Organisation des plans de test"},{"location":"test-management/#liaison-aux-scripts-de-test","text":"Dans chaque fichier de plan de test, vous pouvez ajouter des m\u00e9tadonn\u00e9es ou des annotations sp\u00e9ciales pour lier le plan de test aux scripts de test correspondants. Vous pouvez utiliser des r\u00e9f\u00e9rences, des noms de fichiers ou d'autres identifiants uniques pour identifier les scripts de test associ\u00e9s \u00e0 chaque cas de test.","title":"Liaison aux scripts de test"},{"location":"test-management/#suivi-des-modifications","text":"Utilisez Git pour g\u00e9rer les versions et les modifications des fichiers de plan de test et des scripts de test. Chaque fois qu'un script de test est modifi\u00e9 ou ajout\u00e9, assurez-vous de mettre \u00e0 jour les informations de liaison dans les fichiers de plan de test correspondants. Vous pouvez \u00e9galement utiliser des branches ou des balises Git pour marquer les versions sp\u00e9cifiques des plans de test et des scripts de test.","title":"Suivi des modifications"},{"location":"test-management/#scripts-utilitaires-personnalises","text":"Vous pouvez d\u00e9velopper des scripts utilitaires personnalis\u00e9s qui exploitent les informations des fichiers de plan de test et des scripts de test pour automatiser des t\u00e2ches telles que la g\u00e9n\u00e9ration de rapports, la v\u00e9rification de la coh\u00e9rence entre les plans de test et les scripts de test, etc. Ces scripts peuvent \u00eatre ex\u00e9cut\u00e9s en ligne de commande et int\u00e9gr\u00e9s \u00e0 votre pipeline de test. Exemple : Plan de test pour la page de connexion Voyons un exemple de plan de test pour la page de connexion. Vous pouvez trouver ce plan de test dans src/test-plans/login-plan.md. # Plan de test - Page de connexion Ce document d\u00e9crit les tests associ\u00e9s \u00e0 la page de connexion de l'application. Assurez-vous de mettre \u00e0 jour ce document avec les d\u00e9tails sp\u00e9cifiques de chaque test li\u00e9 \u00e0 la page de connexion. Ce document peut \u00eatre compl\u00e9t\u00e9 avec d'autres tests associ\u00e9s \u00e0 la page de connexion. Vous pouvez ajouter des sections suppl\u00e9mentaires pour d\u00e9crire d'autres sc\u00e9narios de test, des cas d'utilisation sp\u00e9cifiques, des conditions de r\u00e9ussite, etc. ## Liaison aux scripts de test Les scripts de test suivants sont associ\u00e9s aux cas de test sp\u00e9cifiques dans ce plan de test : - Suite de tests : `@error-handling-tests` - Cas de test [test-LP1 - v\u00e9rifie le comportement de l'application en cas d'erreur et enregistre la trace de la pile pour un suivi plus d\u00e9taill\u00e9.](src/tests/login/error-handling.spec.mjs:31) - Suite de tests : `@invalid-login-tests` - Cas de test [test-LP2 - v\u00e9rifie que le formulaire de connexion ne peut pas \u00eatre soumis avec un email invalide.](src/tests/login/invalid-login.spec.mjs:31) - Cas de test [test-LP3 - v\u00e9rifie que la page de connexion n'affiche pas le champ du mot de passe lorsqu'un email inconnu est saisi.](src/tests/login/invalid-login.spec.mjs:45) - Cas de test [test-LP4 - v\u00e9rifie que la connexion \u00e9choue lorsque l'utilisateur saisit un email valide mais un mot de passe invalide.](src/tests/login/invalid-login.spec.mjs:60) - Suite de tests : `@successful-login-tests` - Cas de test [test-LP5 - v\u00e9rifie que l'utilisateur peut se connecter avec des identifiants valides et que la connexion est r\u00e9ussie.](src/tests/login/invalid-login.spec.mjs:31) - Cas de test [test-LP6 - v\u00e9rifie que la session utilisateur est maintenue apr\u00e8s une reconnexion.](src/tests/login/invalid-login.spec.mjs:45) ## Test : Gestion des erreurs et journalisation de la trace de la pile **Objectif du test** : Tester le m\u00e9canisme de gestion des erreurs et la journalisation de la trace de la pile. **Description** : Ce test v\u00e9rifie le comportement de l'application en cas d'erreur et enregistre la trace de la pile pour un suivi plus d\u00e9taill\u00e9. Le test simule une erreur en essayant de cliquer sur un \u00e9l\u00e9ment invalide. L'objectif est de v\u00e9rifier si une erreur est effectivement g\u00e9n\u00e9r\u00e9e, de journaliser l'erreur et sa trace de pile, et de s'assurer que malgr\u00e9 l'erreur, l'utilisateur est toujours connect\u00e9. **\u00c9tapes du test** : 1. Pr\u00e9paration : Configurer le navigateur avec un d\u00e9lai d'attente par d\u00e9faut et charger la page de connexion. 2. Remplir le formulaire de connexion avec un nom d'utilisateur et un mot de passe valides. 3. Soumettre le formulaire de connexion. 4. Essayer de cliquer sur un \u00e9l\u00e9ment invalide. 5. G\u00e9rer l'erreur en journalisant l'erreur et la trace de la pile. 6. Effectuer une assertion pour s'assurer que l'erreur est effectivement survenue. 7. V\u00e9rifier que l'utilisateur est toujours connect\u00e9. --- ## Test : Gestion des connexions invalides **Objectif du test** : V\u00e9rifier le comportement de l'application en cas de tentatives de connexion invalides. **Description** : Cette suite de tests vise \u00e0 valider le comportement de l'application lorsque des tentatives de connexion invalides sont effectu\u00e9es. Il comprend plusieurs cas de test pour g\u00e9rer diff\u00e9rentes situations d'erreur lors de la tentative de connexion. ### Cas de test 1 : Ne pas soumettre le formulaire avec un email invalide **Description** : Ce cas de test v\u00e9rifie que le formulaire de connexion ne peut pas \u00eatre soumis avec un email invalide. **\u00c9tapes du test** : 1. Pr\u00e9paration : Configurer le navigateur avec un d\u00e9lai d'attente par d\u00e9faut et charger la page de connexion. 2. Remplir le champ de l'email avec un email invalide. 3. V\u00e9rifier que le bouton \"Continuer\" est visible. 4. Cliquer sur le bouton \"Continuer\". 5. V\u00e9rifier que le message d'erreur s'affiche. ### Cas de test 2 : Afficher la page d'inscription pour un email inconnu **Description** : Ce cas de test v\u00e9rifie que la page de connexion n'affiche pas le champ du mot de passe lorsqu'un email inconnu est saisi, et qu'elle affiche plut\u00f4t la page d'inscription. **\u00c9tapes du test** : 1. Pr\u00e9paration : Configurer le navigateur avec un d\u00e9lai d'attente par d\u00e9faut et charger la page de connexion. 2. Remplir le champ de l'email avec un email inconnu. 3. V\u00e9rifier que le bouton \"Continuer\" est visible. 4. Cliquer sur le bouton \"Continuer\". 5. V\u00e9rifier que la page d'inscription est visible. ### Cas de test 3 : \u00c9chec de la connexion avec un email valide mais un mot de passe invalide **Description** : Ce cas de test v\u00e9rifie que la connexion \u00e9choue lorsque l'utilisateur saisit un email valide mais un mot de passe invalide. **\u00c9tapes du test** : 1. Pr\u00e9paration : Configurer le navigateur avec un d\u00e9lai d'attente par d\u00e9faut et charger la page de connexion. 2. Remplir le formulaire de connexion avec un email valide et un mot de passe invalide. 3. Soumettre le formulaire de connexion. 4. V\u00e9rifier que l'utilisateur n'est pas connect\u00e9. --- ## Test : Connexion r\u00e9ussie **Objectif du test** : V\u00e9rifier le comportement de l'application lors d'une connexion r\u00e9ussie et la persistence de la session utilisateur. **Description** : Ce test suite vise \u00e0 valider le comportement de l'application lorsqu'une connexion r\u00e9ussie est effectu\u00e9e. Il comprend plusieurs cas de test pour v\u00e9rifier que l'utilisateur peut se connecter avec des informations valides et que sa session est maintenue apr\u00e8s une reconnexion. ### Cas de test 1 : Connexion r\u00e9ussie avec des identifiants valides **Description** : Ce cas de test v\u00e9rifie que l'utilisateur peut se connecter avec des identifiants valides et que la connexion est r\u00e9ussie. **\u00c9tapes du test** : 1. Pr\u00e9paration : Configurer le navigateur avec un d\u00e9lai d'attente par d\u00e9faut et charger la page de connexion. 2. Remplir le formulaire de connexion avec un nom d'utilisateur et un mot de passe valides. 3. Soumettre le formulaire de connexion. 4. V\u00e9rifier que l'utilisateur est connect\u00e9 en utilisant la m\u00e9thode `isLoggedIn(page)` de `loginPage`. 5. R\u00e9cup\u00e9rer l'utilisateur connect\u00e9 \u00e0 l'aide de la m\u00e9thode `getLoggedInUser(page)` de `loginPage`. 6. V\u00e9rifier que l'utilisateur connect\u00e9 correspond \u00e0 l'utilisateur attendu. ### Cas de test 2 : Persistence de la session utilisateur apr\u00e8s reconnexion **Description** : Ce cas de test v\u00e9rifie que la session utilisateur est maintenue apr\u00e8s une reconnexion. **\u00c9tapes du test** : 1. Pr\u00e9paration : Configurer le navigateur avec un d\u00e9lai d'attente par d\u00e9faut et charger la page de connexion. 2. Remplir le formulaire de connexion avec des identifiants valides. 3. Soumettre le formulaire de connexion. 4. V\u00e9rifier que l'utilisateur est connect\u00e9 en utilisant la m\u00e9thode `isLoggedIn(page)` de `loginPage`. 5. Recharger la page. 6. V\u00e9rifier que l'utilisateur est toujours connect\u00e9 en utilisant la m\u00e9thode `isLoggedIn(page)` de `loginPage`. ---","title":"Scripts utilitaires personnalis\u00e9s"}]}